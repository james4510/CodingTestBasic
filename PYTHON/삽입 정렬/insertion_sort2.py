'''
삽입 정렬 문제
- 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 P가 주어졌을 때 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.

입력
- 1번째 줄에 사람의 수 N (1 <= N <= 1,000), 2번째 줄에 각 사람이 돈을 인출하는 데 걸리는 시간 Pi(1 <= Pi <= 1,000)가 주어진다.

문제 분석
1. ATM에서 모든 사람이 가장 빠른 시간에 인출하는 방법을 그리디 방식으로 해결해본다.
2. ATM 앞에 있는 사람 중 인출 시간이 가장 적게 걸리는 사람이 먼저 인출할 수 있도록 순서를 정하는 것이 그리디 방식이다.
3. 그리디 방식을 사용하기 위해서 인출 시간을 기준으로 값을 정렬해야 한다.
4. N의 최대값이 1,000이고 시간 제한이 1초 이므로 시간 복잡도가 O(N^2) 이하인 정렬 알고리즘을 사용한다.
5. 여기서는 삽입 정렬을 이용한다.
6. 정렬을 마친 후에는 각 사람이 돈을 인출하는 데 필요한 시간을 더한다.

문제 분석(상세)
1. 삽입 정렬을 이용해 인술 시간 Pi를 기준으로 데이터를 오름차순 정렬한다.
2. 정렬된 데이터를 바탕으로 모든 사람이 돈을 인출하는 데 필요한 최솟값을 구한다.
    인출에 필요한 시간은 [앞 사람들의 인출 시간의 합 + 자신의 인출 시간] 이므로 합 배열로 푼다.

수도 코드
N(사람 수)
A(자릿수 별로 구분해 저장한 리스트)
S(A 합 배열: 각 사람이 인출을 완료하는 데 필요한 시간을 저장)

for i를 1~N만큼 반복:
    for j를 i-1~0까지 뒤에서부터 반복:
        현재 범위에서 삽입 위치 찾기
    for j를 i~insert_point+1까지 뒤에서부터 반복:
        삽입을 위해 삽입 위치에서 i까지 데이터를 한 칸 씩 뒤로 밀기
    삽입 위치에 현재 데이터 저장

for i를 1~N만큼 반복:
    A 리스트를 통한 합 배열 S 만들기

S 리스트의 각 데이터값을 모두 합해 결과 출력
'''

N = int(input())
A = list(map(int, input().split()))
S = [0]*N

for i in range(1, N):    # 삽입 정렬
    insert_point = i
    insert_value = A[i]

    for j in range(i-1, -1, -1):
        if A[j] < A[i]:
            insert_point = j+1
            break
        if j==0:
            insert_point = 0
    for j in range(i, insert_point, -1):
        A[j] = A[j-1]
    A[insert_point] = insert_value

S[0] = A[0]

for i in range(1, N):   # 합 배열 만들기
    S[i] = S[i-1]+A[i]

sum = 0

for i in range(0, N):   # 합 배열 총합 구하기
    sum += S[i]

print(sum)
